/*
 * File: app/controller/User.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Designer does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.User', {
    extend: 'Ext.app.Controller',

    models: [
        'User'
    ],
    stores: [
        'Users'
    ],
    views: [
        'UsersGrid'
    ]
,

    onDeleteClick: function(button, e, options) {
        Ext.Msg.show({
            title:'Delete record?',
            msg: 'Please configrm',
            buttons: Ext.Msg.YESNO,
            icon: Ext.Msg.QUESTION,
            fn: function(btn, text) {
                if(btn == 'yes') {
                    record =  button.up('gridpanel').getSelectionModel().getSelection()[0];
                    var store = this.getUsersStore();
                    store.remove(record);
                    store.sync();
                }
            },
            scope: this
        });  
    },

    onInsertClick: function(button, e, options) {
        var grid = button.up('gridpanel');

        // get an instance of UserProperties controller and call its insert method.
        this.getController('MyApp.controller.UserProperties').insert(grid);  
    },

    onUpdateClick: function(button, e, options) {
        // here we get the selected record in the grid
        var grid = button.up('gridpanel');
        var user =  grid.getSelectionModel().getSelection()[0];

        // get an instance of UserProperties controller and call its edit method.
        this.getController('MyApp.controller.UserProperties').edit(user, grid);
    },

    onRefreshClick: function(button, e, options) {
        this.getUsersStore().load();  
    },

    saveSession: function() {
        Ext.util.Cookies.set('loggedIn', true);
    },

    deleteSession: function() {
        Ext.util.Cookies.set('loggedIn', false);

    },

    getUser: function() {
        var user = new Ext.ModelManager.getModel({
            loggedIn : false
        }, 'User');

        user.loggedIn = Ext.util.Cookies.get('loggedIn');

        return user;
    },

    init: function() {
        this.control({
            "button[id=btnUserDelete]": {
                click: this.onDeleteClick
            },
            "button[id=btnUserInsert]": {
                click: this.onInsertClick
            },
            "button[id=btnUserUpdate]": {
                click: this.onUpdateClick
            },
            "button[id=btnUserRefresh]": {
                click: this.onRefreshClick
            }
        });

    },

    onLaunch: function() {

    },

    onControllerClickStub: function() {

    }

});
