/*
 * File: app/controller/ViewportController.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Designer does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('MyApp.controller.ViewportController', {
    extend: 'Ext.app.Controller',

    // This controller uses a store and a view.
    stores: ['MyJsonStore'],
    views: ['MyViewport'],

    getLoginForm: function(){
      // Get or Create loginform instance
      lfrm = Ext.getCmp('loginform');
      if(!lfrm){
         lfrm = Ext.widget('loginform')
      };
      return lfrm;
    },
    init: function() {
        // create a variable accessible from any part of this controller
        // from now on, instead of using "this", use "me".
        me = this; 
        me.control({
          'viewport': {
            render: me.onViewportRender
          },
          'button[id=btnLogout]': {
            click: me.onLogout
          }
        });
    },
    onLogout: function(){
      Globals.loggedIn = false;
      me.checkLogin();
    },
    onAfterLogin: function(form){
        // this event is executed after successfull login.
        form.destroy();
        Globals.loggedIn = true;
        me.getMyJsonStoreStore().load();
    },
    checkLogin: function(){
      // user is not logged-in then show loginForm.
      if(!Globals.loggedIn) {
        // assign MyForm.onSuccess event to me.onAfterLogin
        // then show the loginForm.
        me.getLoginForm().onSuccess = me.onAfterLogin;
        me.getLoginForm().show();
      }
    },
    onViewportRender: function(p){
      // after rendering the viewport show the login form if not logged in.
      if(me.checkLogin()){
        console.log("Logged in.");
      };
    }
});
